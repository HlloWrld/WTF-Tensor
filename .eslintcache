[{"/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/index.js":"1","/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/App.js":"2","/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/reportWebVitals.js":"3"},{"size":500,"mtime":1645058879610,"results":"4","hashOfConfig":"5"},{"size":3567,"mtime":1645060801088,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1645058879610,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"jkk76p",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/index.js",[],["17","18"],"/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/App.js",["19","20"],"import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n\n// 0. Import depdendencies\nimport * as tf from \"@tensorflow/tfjs\"\nimport * as speechCommands from \"@tensorflow-models/speech-commands\"\n\n\nconst App = () => {\n// 1. Create model and action states\nconst [model, setModel] = useState(null)\nconst [action, setAction] = useState(null)\nconst [labels, setLabels] = useState(null) \nconst [result, setResult] = useState(null) \n\n// 2. Create Recognizer\nconst loadModel = async () =>{\n  const recognizer = await speechCommands.create(\"BROWSER_FFT\")\n  console.log('Model Loaded')\n  await recognizer.ensureModelLoaded();\n  console.log(recognizer.wordLabels())\n  setModel(recognizer)\n  setLabels(recognizer.wordLabels())\n}\n\nuseEffect(()=>{loadModel()}, []); \n\n// \nfunction argMax(arr){\n  return arr.map((x, i) => [x, i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n}\n\n\n\n // more documentation available at\n    // https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n\n    // the link to your model provided by Teachable Machine export panel\n    const URL = \"http://localhost:3000/my_models/\";\n\n    async function createModel() {\n        const checkpointURL = URL + \"model.json\"; // model topology\n        const metadataURL = URL + \"metadata.json\"; // model metadata\n\n        const recognizer = speechCommands.create(\n            \"BROWSER_FFT\", // fourier transform type, not useful to change\n            undefined, // speech commands vocabulary feature, not useful for your models\n            checkpointURL,\n            metadataURL);\n\n        // check that model and metadata are loaded via HTTPS requests.\n        await recognizer.ensureModelLoaded();\n\n        return recognizer;\n    }\n    useEffect(()=>{createModel()}, []); \n\n    async function init() {\n        const recognizer = await createModel();\n        const classLabels = recognizer.wordLabels(); // get class labels\n\n\n        // listen() takes two arguments:\n        // 1. A callback function that is invoked anytime a word is recognized.\n        // 2. A configuration object with adjustable fields\n        recognizer.listen(result => {\n            const scores = result.scores; // probability of prediction for each class\n            // render the probability scores per class\n            setAction(labels[argMax(Object.values(result.scores))]);\n            \n            console.log(scores);\n            for (let i = 0; i < classLabels.length; i++) {\n                const classPrediction = classLabels[i] + \": \" + result.scores[i].toFixed(2);\n                setResult(classPrediction)\n            }\n        }, {\n            includeSpectrogram: true, // in case listen should return result.spectrogram\n            probabilityThreshold: 0.75,\n            invokeCallbackOnNoiseAndUnknown: true,\n            overlapFactor: 0.50 // probably want between 0.5 and 0.75. More info in README\n        });\n\n        // Stop the recognition in 5 seconds.\n        setTimeout(() => recognizer.stopListening(), 50000);\n        \n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Tap below to diagnose your sound!\n        </p>\n          <button onClick={init}>Listen!</button>\n          <br></br>\n          {action ? <div>{action}</div>:<div>No Action Detected</div> }\n\n          <h2>Result:</h2>\n          {result}\n          \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/d15tr1cktf0x/Documents/TCIB/IDSP/finalTensor/Speech-Command-Recognition-with-Tensorflow.JS/src/reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":7,"column":13,"nodeType":"29","messageId":"30","endLine":7,"endColumn":15},{"ruleId":"27","severity":1,"message":"31","line":13,"column":8,"nodeType":"29","messageId":"30","endLine":13,"endColumn":13},{"ruleId":"23","replacedBy":"32"},{"ruleId":"25","replacedBy":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","'model' is assigned a value but never used.",["34"],["35"],"no-global-assign","no-unsafe-negation"]